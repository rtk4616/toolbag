#!/bin/bash

# Use strict options
# set -e  # Not setting this flag because it causes the script to exit.
set -u
set -o pipefail

################################################################################
#
# SSH function for using rmacs on remote servers to open files in a local
# instance of Sublime Text with the rsub plugin.
#
# This function will ensure that an up-to-date copy of the rmacs script from
# the local machine exists in /tmp/, and establish a reverse SSH tunnel on port
# 52698.
#
################################################################################

# Constants
FSSH_SCRIPT="fssh"
REMOTE_COMMAND_SCRIPT="rmate"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SOCKET_DIR="$HOME/.ssh/socket_dir"
SOCKET_DIR="$HOME/.ssh/socket_dir"
SOCKET_FILENAME="%r@%h:%p"

main() {
    local rmate_file_path="$SCRIPT_DIR/$REMOTE_COMMAND_SCRIPT"
    local fssh_file_path="$SCRIPT_DIR/$FSSH_SCRIPT"
    local output_message=""

    # Make sure both scripts are executable.
    chmod 777 $rmate_file_path $fssh_file_path


    # Check for an existing master socket, and capture the output.
    # output_message="$( (ssh -S "$SOCKET_DIR/$SOCKET_FILENAME" -O check "$@") 2>&1)"
    output_message="$(ssh -S "$SOCKET_DIR/$SOCKET_FILENAME" -O check "$@" 2>&1)"
    RET_CODE=$?

    # If there is no existing socket...
    if [ ! $RET_CODE -eq 0 ]; then
        # ...then the remote connection string contains an error message listing what
        REMOTE_CONNECTION_STRING="$(echo $output_message | sed 's/.*(.*\/\(.*\)).*/\1/')"
        CONNECTION_PARTS=(${REMOTE_CONNECTION_STRING//:/ })
        REMOTE_HOST="${CONNECTION_PARTS[0]}"
        REMOTE_PORT="${CONNECTION_PARTS[1]}"

        # Create the master connection.
        ssh -M -f -R 52698:127.0.0.1:52698 -o ControlPath=$SOCKET_DIR/$SOCKET_FILENAME "$@" "sleep 10"

        # Copy the fssh and rmate scripts to the remote host.
        scp -q -P $REMOTE_PORT -o ControlPath=$SOCKET_DIR/$SOCKET_FILENAME $rmate_file_path $REMOTE_HOST:/tmp/$REMOTE_COMMAND_SCRIPT
        scp -q -P $REMOTE_PORT -o ControlPath=$SOCKET_DIR/$SOCKET_FILENAME $fssh_file_path $REMOTE_HOST:/tmp/$FSSH_SCRIPT
    fi


    # Now we ssh to the server.
    ssh -S $SOCKET_DIR/$SOCKET_FILENAME  "$@"
}

main "$@"
